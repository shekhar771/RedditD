// lib/auth/session.ts

import { prisma } from "@/";
import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { webcrypto as crypto } from "crypto"; // Add this import

export const SESSION_COOKIE_NAME = "session";
const SESSION_DURATION = 30 * 24 * 60 * 60 * 1000; // 30 days in milliseconds

export const createSession = async (userId: string) => {
  try {
    // Delete any existing sessions for this user
    await prisma.session.deleteMany({
      where: { userId }
    });

    // Create a new session
    const session = await prisma.session.create({
      data: {
        userId,
        expires: new Date(Date.now() + SESSION_DURATION),
        sessionToken: crypto.randomUUID()
      }
    });

    return session;
  } catch (error) {
    console.error("Session creation error:", error);
    throw new Error("Failed to create session");
  }
};

export const setSessionCookie = (response: NextResponse, session: any) => {
  response.cookies.set(SESSION_COOKIE_NAME, session.sessionToken, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "lax",
    expires: session.expires
  });
};

export const getSession = async () => {
  const sessionToken = cookies().get(SESSION_COOKIE_NAME)?.value;
  
  if (!sessionToken) return null;

  const session = await prisma.session.findFirst({
    where: { 
      sessionToken,
      expires: { gt: new Date() }
    },
    include: { user: true }
  });

  return session;
};

export const deleteSession = async (sessionToken: string) => {
  await prisma.session.deleteMany({
    where: { sessionToken }
  });
};